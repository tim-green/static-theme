/*

  Mixins
  +

*/
//main gradient
//@include main-gradient($soft-red, $medium-red, $magenta);

@mixin main-gradient($from, $to, $stop: 90%) {
  /* fallback/image non-cover color */
  background-color: $from;
  
  /* Firefox 3.6+ */
  background-image: -moz-linear-gradient(left, $from, $to $stop);

  /* Safari 4+, Chrome 1+ */
  background-image: -webkit-gradient(linear,left top,right top, $from,color-stop(0%, $from), color-stop($to));

  /* Safari 5.1+, Chrome 10+ */
  background-image: -webkit-linear-gradient(left, $from, $to, $stop);

  /* Opera 11.10+ */
  background-image: -o-linear-gradient(left, $from, $to, $stop);
  /* Standard */
  background: linear-gradient(90%, $from, $to, $stop);

  /* IE6-9 */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$from', endColorstr='$to',GradientType=1 );
}



/**
 * Convert font-size from px to rem with px fallback
 *
 * @param $size - the value in pixel you want to convert
 *
 * e.g. p {@include fontSize(12px);}
 * 
 */

// Function for converting a px based font-size to rem.
@function calculateRem($size) {
  $remSize: $size / 16px;
//Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin fontSize($size) {
  font-size: $size;
  font-size: calculateRem($size);
}


//transition
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

//opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

//clearfix
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

//border radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Single side border-radius

// .button {
//   @include border-radius(5px);
// }

// .submit-button {
//   @include border-top-radius(10px);
//   @include border-right-radius(8px);
//   @include border-bottom-radius(10px);
//   @include border-left-radius (6px);
// }

@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
   -webkit-border-top-left-radius: $radius;
   border-top-left-radius: $radius;
   background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}


// Center block
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Clearfix
@mixin clearfix() {
  content: "";
  display: table;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
  clear: both;
}

//display div as a table
@mixin table_display {
    display: table-cell;
    vertical-align: top;
}

// prefix declarations
@mixin prefixed($property, $value) {
    @if $webkit == true {
        -webkit-#{$property}: #{$value};
    }

    @if $moz == true {
        -moz-#{$property}: #{$value};
    }

    @if $ms == true {
        -ms-#{$property}: #{$value};
    }

    @if $o == true {
        -o-#{$property}: #{$value};
    }

    #{$property}: #{$value};
}

// prefix declarations with all browser true
@mixin prefixedallon($property, $value) {
    @if $webkit-on == true {
        -webkit-#{$property}: #{$value};
    }

    @if $moz-on == true {
        -moz-#{$property}: #{$value};
    }

    @if $ms-on == true {
        -ms-#{$property}: #{$value};
    }

    @if $o-on == true {
        -o-#{$property}: #{$value};
    }
    #{$property}: #{$value};
}

// prefix declarations double value
@mixin prefixed_double($property, $value, $value-two) {
    @if $webkit == true {
        -webkit-#{$property}: #{$value},#{$value-two};
    }

    @if $moz == true {
        -moz-#{$property}: #{$value},#{$value-two};
    }

    @if $ms == true {
        -ms-#{$property}: #{$value},#{$value-two};
    }

    @if $o == true {
        -o-#{$property}: #{$value},#{$value-two};
    }

    #{$property}: #{$value},#{$value-two};
}

@mixin linear-gradient($fromColor, $toColor) {
  background: mix($fromColor, $toColor);
  background: -moz-linear-gradient(17deg, $fromColor 5%, $toColor 65%);
  background: -webkit-linear-gradient(17deg, $fromColor 5%, $toColor 65%); 
  background: linear-gradient(17deg, $fromColor 5%, $toColor 65%); 
  filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$fromColor}', EndColorStr='#{$toColor}')
}
@mixin linear-gradient_input($fromColor, $toColor) {
    background-image: linear-gradient($fromColor, $fromColor), linear-gradient($toColor, $toColor);
}